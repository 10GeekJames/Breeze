(function (ko, breeze, datacontext) {
    
    // Extract Breeze metadata definition types
    var DataType = breeze.DataType;
    var EntityType = breeze.EntityType;
    var DataProperty = breeze.DataProperty;
    var NavigationProperty = breeze.NavigationProperty;
    var AutoGeneratedKeyType = breeze.AutoGeneratedKeyType;
    var Validator = breeze.Validator;

    // The empty metadataStore to which we add types
    var store = datacontext.metadataStore;
    addTodoItemType();
    addTodoListType();

    // Type definitions
    function addTodoItemType() {
        var prop;
        var et = new EntityType({
            shortName: "TodoItem",
            namespace: "NoDb.Models",
            autoGeneratedKeyType: AutoGeneratedKeyType.Identity
        });
        et.addProperty(new DataProperty({
            name: "todoItemId",
            dataType: DataType.Int32,
            isNullable: false,
            isPartOfKey: true
        }));
        et.addProperty(prop = new DataProperty({
           name: "title",
           dataType: DataType.String,
           maxLength: 30,
           isNullable: false
        }));     
        // Add client-side validation to 'title' 
        et.addValidator(Validator.required(), prop);
        et.addValidator(Validator.maxLength({ maxLength: 30 }), prop);
        
        et.addProperty(new DataProperty({
            name: "isDone",
            dataType: DataType.Boolean,
            isNullable: false
        }));
        et.addProperty(new DataProperty({
            name: "todoListId",
            dataType: DataType.Int32,
            isNullable: false
        }));
        et.addProperty(new NavigationProperty({
            name: "todoList",
            entityTypeName: "TodoList",
            isScalar: true,
            associationName: "TodoList_Items", // associates with TodoList.Todos
            foreignKeyNames: ["todoListId"]
        }));
            
        store.addEntityType(et);
        store.registerEntityTypeCtor("TodoItem", null, todoItemInitializer);

        function todoItemInitializer(todoItem) {
           todoItem.errorMessage = ko.observable();
        }

    }
        
    function addTodoListType() {
            
        var et = new EntityType({
            shortName: "TodoList",
            namespace: "NoDb.Models",
            autoGeneratedKeyType: AutoGeneratedKeyType.Identity
        });
        et.addProperty(new DataProperty({
            name: "todoListId",
            dataType: DataType.Int32,
            isNullable: false,
            isPartOfKey: true
        }));
        et.addProperty(new DataProperty({
            name: "title",
            dataType: DataType.String,
            maxLength: 30,
            isNullable: false
        }));
        et.addProperty(new NavigationProperty({
            name: "todos",
            entityTypeName: "TodoItem",
            isScalar: false,
            associationName: "TodoList_Items" // associates with TodoItem.TodoList
        }));
            
        store.addEntityType(et);
        store.registerEntityTypeCtor("TodoList", TodoList, todoListInitializer);

        function TodoList() {
             this.title = "My todos";
        }
        
        function todoListInitializer(todoList) {
            todoList.errorMessage = ko.observable();
            todoList.isEditingListTitle = ko.observable(false);
            todoList.newTodoTitle = ko.observable();
        }

        TodoList.prototype.addTodo = function () { 
            if (this.newTodoTitle()) { 
                var todoItem = datacontext.createTodoItem(
                {
                    title: this.newTodoTitle()
                    //, todoList: this  // can't set a navigation property in an initalizer ?
                });
                todoItem.todoList(this); // ... therefore must assign AFTER creation
                datacontext.saveNewTodoItem(todoItem);
                this.newTodoTitle("");
            }
        };

        TodoList.prototype.deleteTodo = function () { // "this" is the TodoItem
            return datacontext.deleteTodoItem(this); 
        };

}
    
})(ko, breeze, todoApp.datacontext);