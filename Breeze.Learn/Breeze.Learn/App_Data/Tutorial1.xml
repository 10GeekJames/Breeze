<Tutorial>
  <Order>1</Order>
  <Title>Tutorial 1 - Queries</Title>
  <Description>Shows how to compose basic Breeze queries</Description>
  <Steps>
    <TutorialStep>
      <Instructions>
        <![CDATA[        
###Getting started

This is a introductory tutorial on using *Breeze* to create and run a simple query.

### What are all these panes for?
The javascript code needed to execute each step of this tutorial is shown in the panel to the right labeled *JavaScript*.  The Html needed to display the data
returned by the JavaScript code appears just below that in the panel labeled *Html*.  Finally, the panel just below this one labeled *Output*
is both where you start the execution of the JavaScript code and where any results will appear.

Each tutorial consists of a set of steps.  You can move between steps by clicking on the arrow keys at the top of this panel. You should try to
perform all of the instructions listed in each panel before moving on to the next step.

If at any time during this tutorial you find it unclear how to proceed, or your code isn't behaving as the tutorial describes,
you can always click the **"Help, it didn't work!"** button (above). This will replace your code with a working copy and run it.

We have already prepared the starting point for this tutorial and filled the *JavaScript* and *Html* panels.

For this tutorial we will be making use of Knockout ( www.knockoutjs.com) to display our results.  If you already know *Knockout*, great!, but if not,
don't worry too much; most of the examples are pretty self explanatory in terms of what the *Html* pane is expected to produce. 

> *Breeze works well with a variety of different frameworks and libraries. Additional tutorials will show Breeze working with several of these.*

There is actually a "Breeze" server application that this tutorial is connected to.  We will not be going into much in the way of details about the
server side here, because we really want to focus on demonstrating *Breeze's* client side query capabilities. But, in case you were wondering the following line in the 
*JavaScript" panel is where we specify the server that we will be talking to. 

>     var manager = new entityModel.EntityManager('api/northwind');

This server application is hosting an entity data model that is loosely based on Microsoft's Northwind database. 

### Ok, now what?
So let's get started by having you click the **Run** button in the box below.

You should have seen a list of employee names appear in the box below.

Now let's try and make this query a bit more complicated by ordering the results.  In *Breeze* we do this by adding an "orderBy" clause to a query.

Simply replace this query in the "JavaScript" panel.

>     var query = new entityModel.EntityQuery()
>        .from("Employees");

with this query

>     var query = new entityModel.EntityQuery()
>         .from("Employees")
>         .orderBy("LastName");

and then press **Run**.

At this point you should see the same "Employees" as before, except that now they should all be sorted by "LastName".
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var core = breeze.core,
    entityModel = breeze.entityModel;
    
core.config.setProperties({
    trackingImplementation: entityModel.entityTracking_ko,
    remoteAccessImplementation: entityModel.remoteAccess_webApi
});

var manager = new entityModel.EntityManager('api/northwind');

var query = new entityModel.EntityQuery()
    .from("Employees");
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
});
]]>
      </StartingJavascript>
      <StartingHtml>
        <![CDATA[
<ul data-bind="foreach: results">
  <li>
    <span data-bind="text:FirstName"></span>
    <span data-bind="text:LastName"></span>
  </li>
</ul>
]]>
      </StartingHtml>
    </TutorialStep>
    <TutorialStep>
      <Instructions>
        <![CDATA[        
When we execute a query in *Breeze*, we are actually making an asynchronous call to the server for a set of data.  Processing the results for this type of operation is commonly handled
in JavaScript via a callback function.  *Breeze* query execution supports both callbacks as well as something called "Promises".  A promise, 
like a callback, is the code that will execute when the query finally returns data to the client. In the "executeQuery" call, shown on the right, the code in the "then" block is 
the "Promise". 

>      .then(function(data) { ..... })

The "function(data) {...}" is the code that will actually execute when the query completes.  The "data" that is passed into this function is the server's response to this query.  The "data"
parameter in turn has a "results" property that contains the list of "entities" that make up the results to this query. 

> *There are several other properties that make up the "data" result. These are all described in the Breeze api documentation.*

But for now, let's try adding a filter to this query.

To accomplish this, simply replace the query in the "JavaScript" panel that looks like this:

>     var query = new entityModel.EntityQuery()
>         .from("Employees")
>         .orderBy("LastName");

with this query

>     var query = new entityModel.EntityQuery()
>       .from("Employees")
>       .orderBy("LastName")
>       .where("LastName", "startsWith", "P");

and then press 'Run'.

At this point, you should only see two "Employee" both of whose last names begin with the letter "P". 

The *orderBy* clause in this query could have gone either before or after the *where" clause.  *Breeze*
doesn't care about the order in which a query is built up. This is because *Breeze* always executes query clauses in
a predetermined order regardless of the order that they were added to the query. 
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var core = breeze.core,
    entityModel = breeze.entityModel;
    
core.config.setProperties({
    trackingImplementation: entityModel.entityTracking_ko,
    remoteAccessImplementation: entityModel.remoteAccess_webApi
});

var manager = new entityModel.EntityManager('api/northwind');

var query = new entityModel.EntityQuery()
    .from("Employees")
    .orderBy("LastName");
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
});
]]>
      </StartingJavascript>
      <StartingHtml></StartingHtml>
    </TutorialStep>
    <TutorialStep>
      <Instructions>
        <![CDATA[
The *where* clause that you just added consists of three parts

- A property name
- A filter operator
- A value

The **property name** is the name of one of the properties on the *type* that is declared in the *.from* method. Since our query started with
      
        .from("Employees")

we know that we can use any property of the "employee" type. We will investigate more of the "employee" type later.

The **filter operator** may be any of the following

- "gt" or ">"
- "lt" or "<"
- "eq" or "=="
- "ge" or ">="
- "le" or "<="
- "ne" or "!="
- "startsWith"
- "endsWith"
- "contains" or "substringof"

So all of the following are valid query clauses, provided that the entity type contains the specified properties.

>     .where("Qty", ">", 7);
>     .where("IsCompleted", "eq" , true);
>     .where("LastName", "startsWith", "P");

>Don't worry about getting your casing correct with these; "startsWith", "STARTSWith" and "startswith" all work. 

These operators can also be expressed using one of the static properties of the **FilterQueryOptions** class. These are

- FilterQueryOp.GreaterThan
- FilterQueryOp.LessThan
- FilterQueryOp.Equals
- FilterQueryOp.GreaterThanOrEqual
- FilterQueryOp.LessThanOrEqual
- FilterQueryOp.NotEquals
- FilterQueryOp.StartsWith
- FilterQueryOp.EndsWith
- FilterQueryOp.Contains

So the queries fragments above can also be expressed as

>     var op = breeze.entityModel.FilterQueryOp;

>     .where("Qty", op.GreaterThan, 7);
>     .where("IsCompleted", op.Equals , true);
>     .where("LastName", op.StartsWith, "P");

So let's try using a few of these.

First, let's change 

>     .where("LastName", "startsWith", "P");

to

>     .where("EmployeeID", ">", 4);

and press **Run**.  

You should have seen 5 employees show up.  Now lets try changing 

>     .where("EmployeeID", ">", 4);

to
  
>     .where("BirthDate", "lt", new Date(50, 9, 12));

and press **Run**.  Only two employees should be left with this filter.

]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var core = breeze.core,
    entityModel = breeze.entityModel;
    
core.config.setProperties({
    trackingImplementation: entityModel.entityTracking_ko,
    remoteAccessImplementation: entityModel.remoteAccess_webApi
});

var manager = new entityModel.EntityManager('api/northwind');

var query = new entityModel.EntityQuery()
    .from("Employees")
    .orderBy("LastName")
    .where("LastName", "startsWith", "P");
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
});
]]>
      </StartingJavascript>
      <StartingHtml></StartingHtml>
    </TutorialStep>
    // 4
    <TutorialStep>
      <Instructions>
        <![CDATA[
The next obvious problem is how to combine query clauses to create a "composite" query. 

In order to demonstrate this , we are going to start by quering a different, somewhat larger, collection on the server.

First, Let's change the query in the the "JavaScript" panel from using "Employees"

>      .from("Employees")
>      .orderBy("LastName")
       .where("BirthDate", "lt", new Date(50, 9, 12));

to "Customers"

>      .from("Customers");

Now we also need to change the "Html" to show *Customer* information instead of *Employee* information.

This involves editing the Html and changing.

>     <span data-bind="text:FirstName"></span>
>     <span data-bind="text:LastName"></span>

to this

>     <span data-bind="text:CompanyName"></span>
>     in
>     <span data-bind="text:City"></span>

and press 'Run'.

You should now see a rather long list of company names, long enough that you need to scroll in order to see them all.
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var core = breeze.core,
    entityModel = breeze.entityModel;
    
core.config.setProperties({
    trackingImplementation: entityModel.entityTracking_ko,
    remoteAccessImplementation: entityModel.remoteAccess_webApi
});

var manager = new entityModel.EntityManager('api/northwind');

var query = new entityModel.EntityQuery()
    .from("Employees")
    .orderBy("LastName")
    .where("BirthDate", "lt", new Date(50, 9, 12));
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
});
]]>
      </StartingJavascript>
      <StartingHtml></StartingHtml>
    </TutorialStep>
    // 5
    <TutorialStep>
      <Instructions>
        <![CDATA[
Now let's try to make this list a bit smaller by adding several filters

To accomplish this we create a "Predicate" that can be used in place of the "where" clause we learned earlier.

This works because every where clause is actually converted to a "Predicate" before it is executed.  So in this next step we
are simply going to create a *Predicate* directly.

First, change this query

>     var query = new entityModel.EntityQuery()
>         .from("Customers");

to 

>     var Predicate = breeze.entityModel.Predicate;
>     var p1 = Predicate.create("CompanyName", "startsWith", "S");
>     var p2 = Predicate.create("City", "contains", "er");
>     var whereClause = p1.and(p2);
>
>     var query = new entityModel.EntityQuery()
>         .from("Customers")
>         .where(whereClause);

and press **Run**.

We should now only see customers with company names that start with "C" that are also in cities whose names contain "er".
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var core = breeze.core,
entityModel = breeze.entityModel;
    
core.config.setProperties({
    trackingImplementation: entityModel.entityTracking_ko,
    remoteAccessImplementation: entityModel.remoteAccess_webApi
});

var manager = new entityModel.EntityManager('api/northwind');

var query = new entityModel.EntityQuery()
    .from("Customers");
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
});
]]>
      </StartingJavascript>
      <StartingHtml>
        <![CDATA[
<ul data-bind="foreach: results">
  <li>
    <span data-bind="text:CompanyName"></span>
    in
    <span data-bind="text:City"></span>
  </li>
</ul>
]]>
      </StartingHtml>
    </TutorialStep>
    // 6
    <TutorialStep>
      <Instructions>
        <![CDATA[
Another way to make the list smaller is a good deal easier, if somewhat less capable.  We can specify
that we only want the first few customers instead of all of them.

To accomplish this we can simply change the query to only give us the first 5 customers.

>     var query = new entityModel.EntityQuery()
>         .from("Customers")
>         .take(5);

and press **Run**.

We should now only see the first 5 customer names appear.  

*Breeze* also supports a *skip* operator and we can therefore perform paging operations by combining
the *skip*, *take* and *orderBy* operators.  

To see this, replace the query with this new query.

>     var pageSize = 5;
>     var pageNum = 3;
>     var query = new entityModel.EntityQuery()
>         .from("Customers")
>         .orderBy("CompanyName");
>         .skip(pageSize*(pageNum-1))
>         .take(pageSize);

and press **Run**.

This query is effectively returning the 3rd page of Customers, assuming a page size of 5. You can then change 
the "pageNum" variable above and rerun to see the effect of moving between pages. 

]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var core = breeze.core,
entityModel = breeze.entityModel;
    
core.config.setProperties({
    trackingImplementation: entityModel.entityTracking_ko,
    remoteAccessImplementation: entityModel.remoteAccess_webApi
});

var manager = new entityModel.EntityManager('api/northwind');

var Predicate = breeze.entityModel.Predicate;
var p1 = Predicate.create("CompanyName", "startsWith", "S");
var p2 = Predicate.create("City", "contains", "er");
var whereClause = p1.and(p2);

var query = new entityModel.EntityQuery()
    .from("Customers")
    .where(whereClause);
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
});
]]>
      </StartingJavascript>
      <StartingHtml>
      </StartingHtml>
    </TutorialStep>
    // 7
    <TutorialStep>
      <Instructions>
        <![CDATA[
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var core = breeze.core,
entityModel = breeze.entityModel;
    
core.config.setProperties({
    trackingImplementation: entityModel.entityTracking_ko,
    remoteAccessImplementation: entityModel.remoteAccess_webApi
});

var manager = new entityModel.EntityManager('api/northwind');

var pageSize = 5;
var pageNum = 3;
var query = new entityModel.EntityQuery()
    .from("Customers")
    .orderBy("CompanyName")
    .skip(pageSize*(pageNum-1))
    .take(pageSize);
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
});
]]>
      </StartingJavascript>
      <StartingHtml>
        <![CDATA[
<ul data-bind="foreach: results">
  <li>
    <span data-bind="text:CompanyName"></span>
  </li>
</ul>
]]>
      </StartingHtml>
    </TutorialStep>
  </Steps>
</Tutorial>