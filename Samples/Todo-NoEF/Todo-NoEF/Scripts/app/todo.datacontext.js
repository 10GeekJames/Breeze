/// <reference path="todo.model.js"/>
window.todoApp = window.ToDoApp || {};

window.todoApp.datacontext = (function (breeze) {

    var serviceName = "api/ToDo"; 
    var saveOptions = new breeze.SaveOptions({ allowConcurrentSaves: true });
    
    var dataService = new breeze.DataService({
        serviceName: serviceName,
        hasServerMetadata: false
    });

    var manager = new breeze.EntityManager({
            dataService: dataService,
            saveOptions: saveOptions
    });
    configureManagerToSaveOnModify();
    
    var metadataStore = manager.metadataStore;
    
    addClientMetadata(metadataStore);

    var datacontext = {
            name: "Breeze",
            metadataStore: metadataStore,
            getToDoLists: getToDoLists,
            createToDoList: createToDoList,
            createToDoItem: createToDoItem,
            saveNewToDoItem: saveNewToDoItem,
            saveNewToDoList: saveNewToDoList,
            deleteToDoItem: deleteToDoItem,
            deleteToDoList: deleteToDoList
        };

    return datacontext;
    
    function addClientMetadata(metadataStore) {
        var DataType = breeze.DataType;
        var et;
        
        et = new breeze.EntityType({
            shortName: "ToDoItem",
            namespace: "ToDoNoEF.Models",
            autoGeneratedKeyType: breeze.AutoGeneratedKeyType.Identity
        });
        et.addProperty( new breeze.DataProperty({
            name: "ToDoItemId",
            dataType: DataType.Int32,
            isNullable: false,
            isPartOfKey: true,
        }));
        et.addProperty(new breeze.DataProperty({
            name: "Title",
            dataType: DataType.String,
            isNullable: false,
        }));
        et.addProperty(new breeze.DataProperty({
            name: "IsDone",
            dataType: DataType.Boolean,
            isNullable: false,
        }));
        et.addProperty(new breeze.DataProperty({
            name: "ToDoListId",
            dataType: DataType.Int32,
            isNullable: false,
        }));
        et.addProperty(new breeze.NavigationProperty({
            name: "ToDoList",
            entityTypeName: "ToDoList",
            isScalar: true,
            associationName: "ToDoList_Items",
            foreignKeyNames: ["ToDoListId"]
        }));
        metadataStore.addEntityType(et);
        
        et = new breeze.EntityType({
            shortName: "ToDoList",
            namespace: "ToDoNoEF.Models",
            autoGeneratedKeyType: breeze.AutoGeneratedKeyType.Identity
        });
        et.addProperty(new breeze.DataProperty({
            name: "ToDoListId",
            dataType: DataType.Int32,
            isNullable: false,
            isPartOfKey: true,
        }));
        et.addProperty(new breeze.DataProperty({
            name: "Title",
            dataType: DataType.String,
            isNullable: false,
        }));
        et.addProperty(new breeze.DataProperty({
            name: "UserId",
            dataType: DataType.String,
            isNullable: false,
        }));

        et.addProperty(new breeze.NavigationProperty({
            name: "ToDos",
            entityTypeName: "ToDoItem",
            isScalar: false,
            associationName: "ToDoList_Items"
        }));
        metadataStore.addEntityType(et);
        


    }
 
    // Private Members
    function getToDoLists(todoListsObservable, errorObservable) {
        return breeze.EntityQuery
            .from("ToDoLists")    // .expand("ToDos")
            .using(manager).execute()
            .then(getSucceeded)
            .fail(getFailed);

        function getSucceeded(data) {
            todoListsObservable(data.results);
        }

        function getFailed(error) {
            errorObservable("Error retrieving todo lists: " + error.message);
        }
    }
    
    function createToDoItem() {
        var item = metadataStore.getEntityType("ToDoItem").createEntity();
        // manager.generateTempKeyValue(item);
        manager.addEntity(item);
        return item;
    }
    
    function createToDoList() {
        var list = metadataStore.getEntityType("ToDoList").createEntity();
        // manager.generateTempKeyValue(list);
        manager.addEntity(list);
        return list;
    }
    
    function saveNewToDoItem(todoItem) {
        return saveEntity(todoItem);
    }
    
    function saveNewToDoList(todoList) {
        return saveEntity(todoList);
    }
    
    function deleteToDoItem(todoItem) {
        todoItem.entityAspect.setDeleted();
        return saveEntity(todoItem);
    }
    
    function deleteToDoList(todoList) {       
        // breeze doesn't cascade delete so we have to do it
        var todoItems = todoList.ToDos().slice(); // iterate over copy
        todoItems.forEach(function(entity) { entity.entityAspect.setDeleted(); });
        todoList.entityAspect.setDeleted();
        return saveEntity(todoList);
    }
    
    function saveEntity(masterEntity) {
        masterEntity.ErrorMessage(null);
        return manager.saveChanges().fail(saveFailed);

        function saveFailed(error) {
            setSaveErrorMessage();
            manager.rejectChanges();
            throw error; // for benefit of caller
        }

        function setSaveErrorMessage() {
            var statename = masterEntity.entityAspect.entityState.name.toLowerCase();
            var typeName = masterEntity.entityType.shortName;
            var msg = "Error saving " + statename + " " + typeName;
            masterEntity.ErrorMessage(msg);
        }
    }
    
    function configureManagerToSaveOnModify() {
        manager.entityChanged.subscribe(function (args) {
            if (args.entityAction === breeze.EntityAction.EntityStateChange) {
                var entity = args.entity;
                if (entity.entityAspect.entityState.isModified()) {
                    saveEntity(entity);
                }
            }
        });
    }
    
})(breeze);